diff --git a/src/libexpr/primops.cc b/src/libexpr/primops.cc
index 54682ea31..39ff6bf78 100644
--- a/src/libexpr/primops.cc
+++ b/src/libexpr/primops.cc
@@ -1472,6 +1472,62 @@ static void derivationStrictInternal(
 
         auto method = ingestionMethod.value_or(ContentAddressMethod::Raw::Flat);
 
+        // Log FOD information with more details
+        std::cerr << "FOD detected: " << drvName << std::endl;
+        std::cerr << "  hash: " << *outputHash << std::endl;
+        std::cerr << "  algo: " << (outputHashAlgo ? printHashAlgo(*outputHashAlgo) : "sha256") << std::endl;
+
+        // Convert method to string manually without using variant checks
+        std::cerr << "  mode: ";
+        if (method == ContentAddressMethod::Raw::Flat)
+            std::cerr << "flat";
+        else if (method == ContentAddressMethod::Raw::Text)
+            std::cerr << "text";
+        else if (method == ContentAddressMethod::Raw::NixArchive)
+            std::cerr << "recursive";
+        else if (method == ContentAddressMethod::Raw::Git)
+            std::cerr << "git";
+        else
+            std::cerr << "unknown";
+        std::cerr << std::endl;
+
+        // Log environment variables that might contain useful information
+        std::cerr << "  environment variables:" << std::endl;
+        for (const auto& [key, value] : drv.env) {
+            // Log potentially interesting env vars
+            if (key == "url" || key == "urls" || key == "src" ||
+                key == "name" || key == "builder" || key == "system" ||
+                key == "outputHashMode" || key == "outputHashAlgo" ||
+                key == "executable" || key == "impureEnvVars" ||
+                key == "preferLocalBuild" || key == "allowSubstitutes") {
+                std::cerr << "    " << key << " = " << value << std::endl;
+            }
+        }
+
+        // Log input derivations and sources
+        if (!drv.inputDrvs.map.empty()) {
+            std::cerr << "  input derivations:" << std::endl;
+            for (const auto& [path, outputs] : drv.inputDrvs.map) {
+                std::cerr << "    " << state.store->printStorePath(path) << " (outputs: ";
+                bool first = true;
+                for (const auto& output : outputs.value) {
+                    if (!first) std::cerr << ", ";
+                    std::cerr << output;
+                    first = false;
+                }
+                std::cerr << ")" << std::endl;
+            }
+        }
+
+        if (!drv.inputSrcs.empty()) {
+            std::cerr << "  input sources:" << std::endl;
+            for (const auto& path : drv.inputSrcs) {
+                std::cerr << "    " << state.store->printStorePath(path) << std::endl;
+            }
+        }
+
+        std::cerr << "----------------------------------------" << std::endl;
+
         DerivationOutput::CAFixed dof {
             .ca = ContentAddress {
                 .method = std::move(method),
